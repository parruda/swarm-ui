#!/usr/bin/env bash
set -e

echo "SwarmUI Installation Script"
echo "=========================="
echo

# Detect OS
OS="$(uname -s)"
ARCH="$(uname -m)"

# Windows detection - normalize OS name
case "$OS" in
  MINGW*|MSYS*|CYGWIN*)
    OS="Windows"
    ;;
esac

# Function to check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check for Ruby
echo "Checking for Ruby..."
if ! command_exists ruby; then
  echo
  echo "ERROR: Ruby is not installed!"
  echo
  echo "Ruby (version 3.4 or higher) is a hard dependency for SwarmUI."
  echo "Please install Ruby first before running this script."
  echo
  echo "Installation options:"
  echo "  • macOS: brew install ruby"
  echo "  • Ubuntu/Debian: sudo apt-get install ruby-full"
  echo "  • Other: https://www.ruby-lang.org/en/documentation/installation/"
  echo
  exit 1
fi

# Check Ruby version
RUBY_VERSION=$(ruby -e 'puts RUBY_VERSION')
RUBY_MAJOR=$(echo "$RUBY_VERSION" | cut -d. -f1)
RUBY_MINOR=$(echo "$RUBY_VERSION" | cut -d. -f2)

if [ "$RUBY_MAJOR" -lt 3 ] || ([ "$RUBY_MAJOR" -eq 3 ] && [ "$RUBY_MINOR" -lt 4 ]); then
  echo
  echo "ERROR: Ruby version $RUBY_VERSION is too old!"
  echo
  echo "SwarmUI requires Ruby 3.4 or higher."
  echo "Please upgrade Ruby before running this script."
  echo
  exit 1
fi

echo "✓ Ruby $RUBY_VERSION found"
echo

# Check for Claude Code
echo "Checking for Claude Code..."
if ! command_exists claude; then
  echo
  echo "ERROR: Claude Code is not installed!"
  echo
  echo "Claude Code is required for SwarmUI to function properly."
  echo "Please install Claude Code by running:"
  echo
  echo "  npm install -g @anthropic-ai/claude-code"
  echo
  echo "After installation, make sure to configure Claude Code with your API key."
  echo "For more information, visit: https://docs.anthropic.com/en/docs/claude-code"
  echo
  exit 1
fi

echo "✓ Claude Code found at: $(which claude)"
echo
echo "SwarmUI requires Claude Code to be properly configured and ready to use."
echo "If you haven't configured Claude Code yet, please do so before proceeding."
echo
echo "Press ENTER to continue..."
read -r

# Display dependencies
echo "This script will install the following dependencies if not already present:"
echo
echo "Required dependencies:"
echo "  • Ruby >= 3.4       - ✓ Already installed ($RUBY_VERSION)"
echo "  • Claude Code       - ✓ Already installed ($(claude --version 2>/dev/null | head -n1 || echo 'version unknown'))"
echo "  • ttyd              - Terminal emulator for web access"
echo "  • tmux              - Terminal multiplexer"
echo "  • gh CLI            - GitHub command line interface"
echo "  • gh webhook ext    - GitHub webhook extension"
echo "  • Redis             - For pub/sub and webhook notifications"
echo
echo "Platform: $OS ($ARCH)"
echo
echo "NOTE: If this script fails, you will need to install these dependencies manually."
echo
echo "Press ENTER to continue or Ctrl+C to cancel..."
read -r

# Function to install on macOS
install_macos() {
  # Check if Homebrew is installed
  if ! command_exists brew; then
    echo "Error: Homebrew is required but not installed."
    echo "Please install Homebrew from https://brew.sh"
    exit 1
  fi

  echo "Installing on macOS..."
  
  # Install ttyd
  if ! command_exists ttyd; then
    echo "Installing ttyd..."
    brew install ttyd
  else
    echo "ttyd is already installed"
  fi

  # Install tmux
  if ! command_exists tmux; then
    echo "Installing tmux..."
    brew install tmux
  else
    echo "tmux is already installed"
  fi

  # Install gh CLI
  if ! command_exists gh; then
    echo "Installing GitHub CLI..."
    brew install gh
  else
    echo "GitHub CLI is already installed"
  fi


  # Install Redis
  if ! command_exists redis-server; then
    echo "Installing Redis..."
    brew install redis
  else
    echo "Redis is already installed"
  fi
}

# Function to install on Linux
install_linux() {
  echo "Installing on Linux..."
  
  # Detect package manager
  if command_exists apt-get; then
    PKG_MANAGER="apt-get"
    PKG_UPDATE="sudo apt-get update"
    PKG_INSTALL="sudo apt-get install -y"
  elif command_exists yum; then
    PKG_MANAGER="yum"
    PKG_UPDATE="sudo yum check-update || true"
    PKG_INSTALL="sudo yum install -y"
  elif command_exists dnf; then
    PKG_MANAGER="dnf"
    PKG_UPDATE="sudo dnf check-update || true"
    PKG_INSTALL="sudo dnf install -y"
  else
    echo "Error: No supported package manager found (apt-get, yum, or dnf)"
    exit 1
  fi

  # Update package lists
  echo "Updating package lists..."
  eval $PKG_UPDATE

  # Install tmux
  if ! command_exists tmux; then
    echo "Installing tmux..."
    eval $PKG_INSTALL tmux
  else
    echo "tmux is already installed"
  fi

  # Install ttyd
  if ! command_exists ttyd; then
    echo "Installing ttyd..."
    
    # ttyd needs to be installed from GitHub releases for most Linux distros
    TTYD_VERSION="1.7.7"
    TTYD_URL=""
    
    case "$ARCH" in
      x86_64)
        TTYD_URL="https://github.com/tsl0922/ttyd/releases/download/${TTYD_VERSION}/ttyd.x86_64"
        ;;
      aarch64|arm64)
        TTYD_URL="https://github.com/tsl0922/ttyd/releases/download/${TTYD_VERSION}/ttyd.aarch64"
        ;;
      *)
        echo "Error: Unsupported architecture: $ARCH"
        echo "Please install ttyd manually from: https://github.com/tsl0922/ttyd"
        exit 1
        ;;
    esac
    
    echo "Downloading ttyd from GitHub..."
    sudo curl -L "$TTYD_URL" -o /usr/local/bin/ttyd
    sudo chmod +x /usr/local/bin/ttyd
    echo "ttyd installed successfully"
  else
    echo "ttyd is already installed"
  fi

  # Install gh CLI
  if ! command_exists gh; then
    echo "Installing GitHub CLI..."
    
    if [ "$PKG_MANAGER" = "apt-get" ]; then
      # Add GitHub CLI repository for Debian/Ubuntu
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      sudo apt update
      sudo apt install gh -y
    elif [ "$PKG_MANAGER" = "yum" ] || [ "$PKG_MANAGER" = "dnf" ]; then
      # Add GitHub CLI repository for RHEL/CentOS/Fedora
      sudo dnf install -y 'dnf-command(config-manager)'
      sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
      sudo dnf install -y gh
    fi
  else
    echo "GitHub CLI is already installed"
  fi


  # Install Redis
  if ! command_exists redis-server; then
    echo "Installing Redis..."
    if [ "$PKG_MANAGER" = "apt-get" ]; then
      eval $PKG_INSTALL redis-server
    else
      eval $PKG_INSTALL redis
    fi
  else
    echo "Redis is already installed"
  fi
}

# Main installation logic
case "$OS" in
  Darwin)
    install_macos
    ;;
  Linux)
    install_linux
    ;;
  Windows)
    echo "Windows detected!"
    echo
    echo "On Windows, the following dependencies must be installed manually:"
    echo
    echo "Required dependencies:"
    echo "  • Ruby >= 3.4       - Download from: https://rubyinstaller.org/"
    echo "  • Claude Code       - Install with: npm install -g @anthropic-ai/claude-code"
    echo "  • ttyd              - Download from: https://github.com/tsl0922/ttyd/releases"
    echo "  • tmux              - Install via Git Bash or WSL"
    echo "  • gh CLI            - Download from: https://cli.github.com/"
    echo "  • gh webhook ext    - After installing gh, run: gh extension install cli/gh-webhook"
    echo "  • Redis             - Download from: https://github.com/microsoftarchive/redis/releases"
    echo
    echo "Please ensure all these dependencies are installed and available in your PATH."
    echo
    echo "If you have already installed these dependencies, press ENTER to proceed with the installation."
    echo "Otherwise, press Ctrl+C to cancel and install the dependencies first."
    read -r
    echo
    echo "Proceeding with Ruby dependencies installation..."
    ;;
  *)
    echo "Error: Unsupported operating system: $OS"
    echo "This script supports macOS, Linux, and Windows (manual dependency installation required)."
    exit 1
    ;;
esac

# Check gh CLI configuration
if command_exists gh; then
  echo
  echo "GitHub CLI detected. Checking authentication..."
  
  if gh auth status >/dev/null 2>&1; then
    echo "✓ GitHub CLI is authenticated"
    echo
    echo "IMPORTANT: SwarmUI requires specific GitHub scopes to function properly."
    echo "Please ensure your gh authentication includes these scopes:"
    echo "  • repo (for accessing repositories)"
    echo "  • read:org (for organization access)"
    echo "  • write:discussion (for issue comments)"
    echo
    echo "To check your current scopes, run:"
    echo "  gh auth status -t"
    echo
    echo "If you need to add these scopes, run:"
    echo "  gh auth refresh -s repo,read:org,write:discussion"
    echo
    echo "Press ENTER to continue after verifying your scopes..."
    read -r
  else
    echo
    echo "GitHub CLI is not authenticated!"
    echo
    echo "Please authenticate with the required scopes by running:"
    echo "  gh auth login -s repo,read:org,write:discussion"
    echo
    echo "After authentication, run this installer again."
    exit 1
  fi
fi

# Install gh webhook extension
echo
echo "Installing gh webhook extension..."
if gh extension list | grep -q "cli/gh-webhook"; then
  echo "gh webhook extension is already installed"
else
  gh extension install cli/gh-webhook
  echo "gh webhook extension installed successfully"
fi

echo
echo "Installation complete!"
echo
echo "Installed tools:"
command_exists ttyd && echo "✓ ttyd $(ttyd --version 2>&1 | head -n1)"
command_exists tmux && echo "✓ tmux $(tmux -V)"
command_exists gh && echo "✓ gh $(gh --version | head -n1)"
gh extension list | grep -q "cli/gh-webhook" && echo "✓ gh webhook extension"
command_exists redis-server && echo "✓ redis $(redis-server --version)"

echo
echo "Installing Ruby dependencies..."
bundle install

echo
echo "Setting up credentials..."
# Generate master key if it doesn't exist
if [ ! -f "config/master.key" ]; then
  echo "Generating new master key..."
  ruby -e "require 'securerandom'; File.write('config/master.key', SecureRandom.hex(16))"
  chmod 600 config/master.key
  echo "Master key generated"
fi

# Generate credentials file if it doesn't exist
if [ ! -f "config/credentials.yml.enc" ]; then
  echo "Generating new credentials file..."
  
  # Create a temporary file with the credentials content
  TEMP_FILE=$(mktemp)
  cat > "$TEMP_FILE" << 'EOF'
secret_key_base: PLACEHOLDER_SECRET

active_record_encryption:
  primary_key: PLACEHOLDER_PRIMARY
  deterministic_key: PLACEHOLDER_DETERMINISTIC
  key_derivation_salt: PLACEHOLDER_SALT
EOF
  
  # Replace placeholders with actual values
  ruby -e "
    require 'securerandom'
    content = File.read('$TEMP_FILE')
    content.gsub!('PLACEHOLDER_SECRET', SecureRandom.hex(64))
    content.gsub!('PLACEHOLDER_PRIMARY', SecureRandom.base64(32))
    content.gsub!('PLACEHOLDER_DETERMINISTIC', SecureRandom.base64(32))
    content.gsub!('PLACEHOLDER_SALT', SecureRandom.base64(32))
    File.write('$TEMP_FILE', content)
  "
  
  # Use rails credentials:edit to encrypt the file
  EDITOR="cp $TEMP_FILE" bin/rails credentials:edit
  rm -f "$TEMP_FILE"
  
  echo "Credentials file generated with required keys"
fi

echo
echo "Setting up the database..."
bin/rails db:create db:migrate

echo
echo "Setup complete!"
echo
echo "To start the application, run:"
echo "  bin/start"
echo
echo "The application will be available at http://localhost:4269"