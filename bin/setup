#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir(APP_ROOT) do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Setting up credentials =="
  # Generate master key if it doesn't exist
  unless File.exist?("config/master.key")
    puts "Generating new master key..."
    require "securerandom"
    master_key = SecureRandom.hex(16)
    File.write("config/master.key", master_key)
    FileUtils.chmod(0o600, "config/master.key")
    puts "Master key generated"
  end

  # Generate credentials file if it doesn't exist
  unless File.exist?("config/credentials.yml.enc")
    puts "Generating new credentials file..."

    # Create the credentials content with all required fields
    require "tempfile"
    require "yaml"
    require "securerandom"

    credentials_content = <<~YAML
      secret_key_base: #{SecureRandom.hex(64)}

      active_record_encryption:
        primary_key: #{SecureRandom.base64(32)}
        deterministic_key: #{SecureRandom.base64(32)}
        key_derivation_salt: #{SecureRandom.base64(32)}
    YAML

    # Create a temporary file with the credentials content
    Tempfile.create(["credentials", ".yml"]) do |tmp|
      tmp.write(credentials_content)
      tmp.flush

      # Use rails credentials:edit to encrypt the file properly
      ENV["EDITOR"] = "cp #{tmp.path}"
      system! "bin/rails credentials:edit"
    end

    puts "Credentials file generated with required keys"
  end

  unless ARGV.include?("--skip-database")
    puts "\n== Preparing database =="
    system! "bin/rails db:prepare"
  end

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    $stdout.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
