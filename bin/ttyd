#!/usr/bin/env ruby
# frozen_string_literal: true

require "English"
require "base64"
require "json"
require "shellwords"

# Get the base64 encoded argument
encoded_arg = ARGV.join("")

# Decode and parse JSON with symbol keys
decoded = Base64.urlsafe_decode64(encoded_arg)
params = JSON.parse(decoded, symbolize_names: true)

# Check if this is terminal mode
mode = params[:mode] || "swarm"

if mode == "terminal"
  # Terminal mode parameters
  terminal_id = params[:terminal_id]
  tmux_session_name = params[:tmux_session_name]
  working_directory = params[:working_directory]
  params[:session_id]

  rails_root = File.expand_path("..", __dir__)
  terminal_status_script = File.join(rails_root, "bin", "update_terminal_status")

  # Check if tmux session already exists
  existing = system("tmux", "has-session", "-t", tmux_session_name, err: File::NULL)

  command = if existing
    # Attach to existing session
    ""
  else
    # Create new terminal session in the specified directory
    "cd #{Shellwords.escape(working_directory)} && $SHELL"
  end

  # Execute tmux session (this will block until the session ends)
  puts "Starting terminal in: #{working_directory}"
  puts "Tmux session: #{tmux_session_name}"

  # Capture the exit status of tmux
  success = if command.empty?
    # Just attach to existing session
    system("tmux", "-f", "config/tmux.conf", "attach", "-t", tmux_session_name)
  else
    # Create new session with command
    system("tmux", "-f", "config/tmux.conf", "new", "-s", tmux_session_name, command)
  end

  # If tmux failed to execute, pause to let user read the error
  unless success
    puts "\n\nError: tmux command failed to execute!"
    puts "Exit status: #{$CHILD_STATUS.exitstatus}" if $CHILD_STATUS
    puts "\nPress ENTER to continue..."
    $stdin.gets
  end

  # After tmux exits, mark the terminal as stopped
  puts "Terminal session ended. Marking terminal #{terminal_id} as stopped..."
  result = system(terminal_status_script, terminal_id, "stopped")
  puts "Update terminal status result: #{result}"
else
  # Original claude-swarm mode
  # Extract parameters
  tmux_session_name = params[:tmux_session_name]
  project_path = params[:project_path]
  swarm_file = params[:swarm_file]
  use_worktree = params[:use_worktree]
  session_id = params[:session_id]
  new_session = params[:new_session]
  openai_api_key = params[:openai_api_key]
  environment_variables = params[:environment_variables]
  initial_prompt = params[:initial_prompt]

  # Build the command
  if new_session
    command = "bundle exec claude-swarm start #{swarm_file}"
    command += " --session-id #{session_id}"
    command += " --worktree" if use_worktree
    command += " --root-dir #{project_path}"
    command += " -i #{Shellwords.escape(initial_prompt)}" if initial_prompt && !initial_prompt.empty?
  else
    command = "bundle exec claude-swarm restore #{session_id}"
  end

  rails_root = File.expand_path("..", __dir__)
  status_script = File.join(rails_root, "bin", "update_session_status")

  # Mark session as active before starting
  system(status_script, session_id, "active")

  # Build environment for tmux session
  env = {}
  env["OPENAI_API_KEY"] = openai_api_key if openai_api_key && !openai_api_key.empty?

  # Parse and add custom environment variables
  if environment_variables && !environment_variables.empty?
    case environment_variables
    when Hash
      # Handle Hash format (from database)
      environment_variables.each do |key, value|
        env[key.to_s] = value.to_s
      end
    when String
      # Handle String format (legacy)
      environment_variables.each_line do |line|
        line = line.strip
        next if line.empty? || line.start_with?("#")

        key, value = line.split("=", 2)
        next unless key && value

        env[key.strip] = value.strip
      end
    end
  end

  # Prepend environment variables to the command
  unless env.empty?
    env_prefix = env.map { |k, v| "#{k}=#{Shellwords.escape(v)}" }.join(" ")
    command = "#{env_prefix} #{command}"
  end

  # Execute tmux session (this will block until the session ends)
  puts "Executing ENV: #{env.inspect}"
  puts "Executing COMMAND: tmux -f config/tmux.conf new -A -s #{tmux_session_name} #{command}"

  # Wrap the command to handle errors and keep the session open on failure
  wrapped_command = "bash -c '#{command}; EXIT_CODE=$?; if [ $EXIT_CODE -ne 0 ]; then echo; echo \"Command exited with status $EXIT_CODE\"; echo \"Press ENTER to exit...\"; read; fi; exit $EXIT_CODE'"

  # Capture the exit status of tmux
  success = system("tmux", "-f", "config/tmux.conf", "new", "-A", "-s", tmux_session_name, wrapped_command)

  # If tmux failed to execute, pause to let user read the error
  unless success
    puts "\n\nError: tmux command failed to execute!"
    puts "Exit status: #{$CHILD_STATUS.exitstatus}" if $CHILD_STATUS
    puts "\nPress ENTER to continue..."
    $stdin.gets
  end

  # After tmux exits, mark the session as stopped
  system(status_script, session_id, "stopped")
end
