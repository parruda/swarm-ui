#!/usr/bin/env ruby
# frozen_string_literal: true

# This script updates terminal session status
# Usage: bin/update_terminal_status <terminal_id> <status>
# Status can be: active, stopped

require "net/http"
require "uri"
require "json"

terminal_id = ARGV[0]
status = ARGV[1]

if terminal_id.nil? || terminal_id.empty?
  puts "Error: terminal_id is required"
  exit 1
end

if status.nil? || status.empty?
  puts "Error: status is required (active or stopped)"
  exit 1
end

unless ["active", "stopped"].include?(status)
  puts "Error: status must be 'active' or 'stopped'"
  exit 1
end

# Try API endpoint first
def update_terminal_status_via_api(terminal_id, status)
  uri = URI("http://localhost:3000/api/terminal_sessions/#{terminal_id}/status")

  begin
    response = Net::HTTP.start(uri.host, uri.port, open_timeout: 2, read_timeout: 2) do |http|
      request = Net::HTTP::Put.new(uri)
      request["Content-Type"] = "application/json"
      request.body = { status: status }.to_json
      http.request(request)
    end

    if response.code == "200"
      puts "Terminal #{terminal_id} marked as #{status} via API"
      true
    else
      puts "API returned status #{response.code}: #{response.body}"
      false
    end
  rescue Net::OpenTimeout, Net::ReadTimeout, Errno::ECONNREFUSED, SocketError => e
    puts "API request failed: #{e.message}"
    false
  end
end

# Fallback to direct database access
def update_terminal_status_via_db(terminal_id, status)
  require_relative "../config/environment"

  begin
    terminal = TerminalSession.find_by(terminal_id: terminal_id)

    if terminal.nil?
      puts "Error: Terminal session not found with id: #{terminal_id}"
      return false
    end

    terminal.status = status

    if status == "stopped"
      terminal.ended_at = Time.current
    end

    if terminal.save
      puts "Terminal #{terminal_id} marked as #{status} via database"
      true
    else
      puts "Error saving terminal: #{terminal.errors.full_messages.join(", ")}"
      false
    end
  rescue StandardError => e
    puts "Database error: #{e.message}"
    false
  end
end

# Try API first, then fallback to database
if update_terminal_status_via_api(terminal_id, status)
  exit 0
else
  puts "Falling back to direct database access..."
  if update_terminal_status_via_db(terminal_id, status)
    exit 0
  else
    exit 1
  end
end
